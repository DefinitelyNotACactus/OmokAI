/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import data.Mordekai;
import data.Player;

/**
 *
 * @author david
 */
public class Game extends JFrame {
    
    public static final int BOARD_SIZE = 15;
    
    private ModeSelect selector;
    
    private Player black; // Human
    private Player white; // Player 2 (or Mordekai)
    
    private boolean isAivsPlayer;
    private boolean isAi;
    private boolean isAiComputing;
    
    private Timer turnTimer;
    private int counter;
    
    private Thread animationThread;
    private Runnable run;
    private volatile int aState;
    
    private int turn;
    private volatile boolean finished;
    private Piece[][] board;
    
    /**
     * Creates new form Game
     */
    public Game() {
        selector = new ModeSelect(this);
        black = new Player("Player 1", 0);
        white = new Player("Player 2", 1);
        
        turn = 1;
        counter = 0;
        isAi = false;
        finished = false;
        board = new Piece[BOARD_SIZE][BOARD_SIZE];
        
        initComponents();
        
        turnTimer = new Timer(1000, (ActionEvent evt) -> {
            if(!finished) {
                counter++;
                timerLabel.setText(String.format("%02d:%02d", counter/60, counter%60));
            }
        });

        aState = 0;
        run = this::animatePieces;
        animationThread = new Thread(run);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel = new javax.swing.JPanel();
        censorLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        btReady = new javax.swing.JButton();
        btStart = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        turnLabel = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        player1TurnLabel = new javax.swing.JLabel();
        player1PieceLabel = new javax.swing.JLabel();
        player1NameLabel = new javax.swing.JLabel();
        player1WinsLabel = new javax.swing.JLabel();
        player1LossesLabel = new javax.swing.JLabel();
        player1TiesLabel = new javax.swing.JLabel();
        info1Label = new javax.swing.JLabel();
        player2TurnLabel = new javax.swing.JLabel();
        player2PieceLabel = new javax.swing.JLabel();
        player2NameLabel = new javax.swing.JLabel();
        player2WinsLabel = new javax.swing.JLabel();
        player2LossesLabel = new javax.swing.JLabel();
        player2TiesLabel = new javax.swing.JLabel();
        info2Label = new javax.swing.JLabel();
        boardPanel = new javax.swing.JPanel();
        actionsPanel = new javax.swing.JPanel();
        btAbsten = new javax.swing.JButton();
        btDraw = new javax.swing.JButton();
        btRefund = new javax.swing.JButton();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Omok");
        setLocation(new java.awt.Point(200, 200));
        setResizable(false);
        setSize(new java.awt.Dimension(734, 429));

        gamePanel.setSize(new java.awt.Dimension(734, 429));
        gamePanel.setLayout(null);
        gamePanel.add(selector);
        selector.setBounds(287, 134, 160, 160);

        censorLabel.setBackground(new java.awt.Color(255, 255, 255));
        censorLabel.setOpaque(true);
        gamePanel.add(censorLabel);
        censorLabel.setBounds(410, 20, 80, 20);
        gamePanel.add(titleLabel);
        titleLabel.setBounds(510, 20, 210, 0);

        btReady.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btReady.normal.0.png"))); // NOI18N
        btReady.setBorderPainted(false);
        btReady.setContentAreaFilled(false);
        btReady.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btReady.disabled.0.png"))); // NOI18N
        btReady.setEnabled(false);
        btReady.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btReady.pressed.0.png"))); // NOI18N
        btReady.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btReady.mouseOver.0.png"))); // NOI18N
        btReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReadyActionPerformed(evt);
            }
        });
        gamePanel.add(btReady);
        btReady.setBounds(623, 242, 97, 29);
        btReady.setVisible(false);

        btStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btStart.normal.0.png"))); // NOI18N
        btStart.setBorderPainted(false);
        btStart.setContentAreaFilled(false);
        btStart.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btStart.disabled.0.png"))); // NOI18N
        btStart.setEnabled(false);
        btStart.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btStart.pressed.0.png"))); // NOI18N
        btStart.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btStart.mouseOver.0.png"))); // NOI18N
        btStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartActionPerformed(evt);
            }
        });
        gamePanel.add(btStart);
        btStart.setBounds(623, 242, 97, 29);

        btExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btExit.normal.0.png"))); // NOI18N
        btExit.setBorderPainted(false);
        btExit.setContentAreaFilled(false);
        btExit.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btExit.normal.0.png"))); // NOI18N
        btExit.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btExit.mouseOver.0.png"))); // NOI18N
        btExit.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btExit.pressed.0.png"))); // NOI18N
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });
        gamePanel.add(btExit);
        btExit.setBounds(678, 403, 43, 18);

        turnLabel.setText("Press start to begin");
        gamePanel.add(turnLabel);
        turnLabel.setBounds(15, 404, 260, 16);

        timerLabel.setText("00:00");
        gamePanel.add(timerLabel);
        timerLabel.setBounds(300, 404, 80, 16);

        player1TurnLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.turn.png"))); // NOI18N
        gamePanel.add(player1TurnLabel);
        player1TurnLabel.setBounds(401, 56, 81, 176);
        player1TurnLabel.setVisible(false);

        player1PieceLabel.setIcon(black.getIcon());
        gamePanel.add(player1PieceLabel);
        player1PieceLabel.setBounds(407, 190, 23, 23);

        player1NameLabel.setBackground(new java.awt.Color(255, 255, 255));
        player1NameLabel.setText(black.getName());
        player1NameLabel.setOpaque(true);
        player1NameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gamePanel.add(player1NameLabel);
        player1NameLabel.setBounds(407, 154, 70, 14);

        player1WinsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        player1WinsLabel.setText("" + black.getWins());
        gamePanel.add(player1WinsLabel);
        player1WinsLabel.setBounds(445, 172, 20, 13);

        player1LossesLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        player1LossesLabel.setText("" + black.getTies());
        gamePanel.add(player1LossesLabel);
        player1LossesLabel.setBounds(445, 186, 20, 13);

        player1TiesLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        player1TiesLabel.setText("" + black.getLosses());
        gamePanel.add(player1TiesLabel);
        player1TiesLabel.setBounds(445, 200, 20, 13);

        info1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.info0.png"))); // NOI18N
        gamePanel.add(info1Label);
        info1Label.setBounds(403, 151, 77, 64);

        player2TurnLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.turn.png"))); // NOI18N
        gamePanel.add(player2TurnLabel);
        player2TurnLabel.setBounds(487, 56, 81, 176);
        player2TurnLabel.setVisible(false);

        player2PieceLabel.setIcon(white.getIcon());
        gamePanel.add(player2PieceLabel);
        player2PieceLabel.setBounds(494, 190, 23, 23);

        player2NameLabel.setBackground(new java.awt.Color(255, 255, 255));
        player2NameLabel.setText(white.getName());
        player2NameLabel.setOpaque(true);
        player2NameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        gamePanel.add(player2NameLabel);
        player2NameLabel.setBounds(493, 154, 70, 14);

        player2WinsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        player2WinsLabel.setText("" + white.getWins());
        gamePanel.add(player2WinsLabel);
        player2WinsLabel.setBounds(531, 172, 20, 13);

        player2LossesLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        player2LossesLabel.setText("" + white.getTies());
        gamePanel.add(player2LossesLabel);
        player2LossesLabel.setBounds(531, 186, 20, 13);

        player2TiesLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        player2TiesLabel.setText("" + white.getLosses());
        gamePanel.add(player2TiesLabel);
        player2TiesLabel.setBounds(531, 200, 20, 13);

        info2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.info0.png"))); // NOI18N
        gamePanel.add(info2Label);
        info2Label.setBounds(490, 151, 77, 64);

        boardPanel.setOpaque(false);
        boardPanel.setLayout(new java.awt.GridLayout(15, 15));
        gamePanel.add(boardPanel);
        boardPanel.setBounds(12, 20, 374, 370);

        actionsPanel.setOpaque(false);
        actionsPanel.setLayout(new javax.swing.BoxLayout(actionsPanel, javax.swing.BoxLayout.LINE_AXIS));

        btAbsten.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btAbsten.normal.0.png"))); // NOI18N
        btAbsten.setBorderPainted(false);
        btAbsten.setContentAreaFilled(false);
        btAbsten.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btAbsten.disabled.0.png"))); // NOI18N
        btAbsten.setMaximumSize(new java.awt.Dimension(47, 18));
        btAbsten.setMinimumSize(new java.awt.Dimension(47, 18));
        btAbsten.setPreferredSize(new java.awt.Dimension(47, 18));
        btAbsten.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btAbsten.mouseOver.0.png"))); // NOI18N
        btAbsten.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btAbsten.pressed.0.png"))); // NOI18N
        btAbsten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAbstenActionPerformed(evt);
            }
        });
        actionsPanel.add(btAbsten);

        btDraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btDraw.normal.0.png"))); // NOI18N
        btDraw.setBorderPainted(false);
        btDraw.setContentAreaFilled(false);
        btDraw.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btDraw.disabled.0.png"))); // NOI18N
        btDraw.setMaximumSize(new java.awt.Dimension(47, 18));
        btDraw.setMinimumSize(new java.awt.Dimension(47, 18));
        btDraw.setPreferredSize(new java.awt.Dimension(47, 18));
        btDraw.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btDraw.mouseOver.0.png"))); // NOI18N
        btDraw.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btDraw.pressed.0.png"))); // NOI18N
        btDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDrawActionPerformed(evt);
            }
        });
        actionsPanel.add(btDraw);

        btRefund.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btRefund.normal.0.png"))); // NOI18N
        btRefund.setBorderPainted(false);
        btRefund.setContentAreaFilled(false);
        btRefund.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btRefund.disabled.0.png"))); // NOI18N
        btRefund.setEnabled(false);
        btRefund.setMaximumSize(new java.awt.Dimension(47, 18));
        btRefund.setMinimumSize(new java.awt.Dimension(47, 18));
        btRefund.setPreferredSize(new java.awt.Dimension(47, 18));
        btRefund.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btRefund.mouseOver.0.png"))); // NOI18N
        btRefund.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Common/Common.btRefund.pressed.0.png"))); // NOI18N
        btRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefundActionPerformed(evt);
            }
        });
        actionsPanel.add(btRefund);

        gamePanel.add(actionsPanel);
        actionsPanel.setBounds(409, 403, 250, 18);

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Omok.backgrnd.png"))); // NOI18N
        gamePanel.add(backgroundLabel);
        backgroundLabel.setBounds(0, 0, 734, 429);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        int selection = JOptionPane.showConfirmDialog(this, "Are you sure you want to leave?", "Info", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(selection == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_btExitActionPerformed

    private void btReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReadyActionPerformed
        
    }//GEN-LAST:event_btReadyActionPerformed

    private void btAbstenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAbstenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btAbstenActionPerformed

    private void btDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDrawActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btDrawActionPerformed

    private void btRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefundActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btRefundActionPerformed

    private void btStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartActionPerformed
        Piece piece;
        boardPanel.removeAll();
        for(int i = 0; i < 15; i++) {
            for(int j = 0; j < 15; j++) {
                piece = new Piece(this, j, i);
                board[i][j] = piece;
                boardPanel.add(piece);
            }
        }
        if(white instanceof Mordekai) {
            Mordekai ai = (Mordekai) white;
            ai.setBoard(board);
        }
        btStart.setVisible(false);
        //btReady.setVisible(true);
        finished = false;
        isAiComputing = false;
        turn = 1;
        isAi = true;
        nextMove();
        turnTimer.start();
        if(!animationThread.isAlive()) {
            animationThread.start();
        }
        boardPanel.revalidate();
    }//GEN-LAST:event_btStartActionPerformed

    private void nextMove() {
        turn++;
        if(turn > 225) {
            finishGame(true);
        }
        player1TurnLabel.setVisible(((turn%2) == 0));
        player2TurnLabel.setVisible(((turn%2) == 1));
        turnLabel.setText("[" + getCurrentPlayer().getName() + "] turn");
        resetCounter();
        
        isAi = !isAi;
        if(isAiTurn() && isAivsPlayer) {
            playAi();
        }
    }
    
    private void playAi() {
        Mordekai ai = (Mordekai) white;
        ai.computeNextMove();
        ai.getWorker().execute();
    }
    
    public void processTurn(int x, int y) {
        if(searchCombo(x, y)) {
            finishGame(false);
        } else {
            nextMove();
        }
    }
    
    private boolean searchCombo(int x, int y) {
        if(searchComboDirection(x, y, 1, 0)) {
            return true;
        }
        if(searchComboDirection(x, y, 0, 1)) {
            return true;
        }
        if(searchComboDirection(x, y, 1, 1)) {
            return true;
        }
        return searchComboDirection(x, y, 1, -1);
    }
    
    private boolean searchComboDirection(int x, int y, int dirX, int dirY) {
        int count = 1;
        for(int i = x + dirX, j = y + dirY; i >= 0 && i < 15 && j >= 0 && j < 15 && board[j][i].getOwner() == getCurrentPlayer() && count < 5; ) {
            count++;
            i += dirX;
            j += dirY;
        }
        if(count == 5) {
            return true;
        }
        for(int i = x - dirX, j = y - dirY; i >= 0 && i < 15 && j >= 0 && j < 15 && board[j][i].getOwner() == getCurrentPlayer() && count < 5; ) {
            count++;
            i -= dirX;
            j -= dirY;
        }
        return (count == 5);
    }
    
    public void finishGame(boolean tie) {
        if(!tie) {
        turnLabel.setText("[" + getCurrentPlayer().getName() + "] has won!");
        } else {
            turnLabel.setText("Somehow this ended in a tie!");
        }
        updateStats(tie);
        turnTimer.stop();
        resetCounter();
        finished = true;
        btStart.setVisible(true);
        setPiecesState(0);
        revalidate();
    }
    
    public void modeSelected(int mode, Player player1, Player player2) {
        isAivsPlayer = (mode == 0);
        setBlack(player1);
        setWhite(player2);
        
        btStart.setEnabled(true); 
        revalidate();
    }
    
    private void setWhite(Player player) {
        white = player;
        
        player2NameLabel.setText(white.getName());
        player2WinsLabel.setText("" + white.getWins());
        player2TiesLabel.setText("" + white.getTies());
        player2LossesLabel.setText("" + white.getLosses());
        player2PieceLabel.setIcon(white.getIcon());
    }
    
    private void setBlack(Player player) {
        black = player;
        
        player1NameLabel.setText(black.getName());
        player1WinsLabel.setText("" + black.getWins());
        player1TiesLabel.setText("" + black.getTies());
        player1LossesLabel.setText("" + black.getLosses());
        player1PieceLabel.setIcon(black.getIcon());
    }
    
    public Player getCurrentPlayer() {
        return ((turn%2 == 0) ? black : white);
    }
    
    public Player getOtherPlayer() {
        return ((turn%2 == 0) ? white : black);
    }
    
    public boolean gameFinished() {
        return finished;
    }
    
    private void resetCounter() {
        counter = 0;
        timerLabel.setText(String.format("%02d:%02d", counter/60, counter%60));
    }
    
    public int getCounter() {
        return counter;
    }
    
    public Piece[][] getBoard() {
        return board;
    }
    
    public void setPieceOwnerAtPosition(int x, int y) {
        board[y][x].setOwner(white); //Only the AI calls this method
        board[y][x].repaint();
        processTurn(x, y);
    }
    
    public boolean isAiTurn() {
        return isAi && isAivsPlayer;
    }
    
    public boolean isAiComputing() {
        return isAiComputing;
    }
    
    public void setAiComputing(boolean computing) {
        isAiComputing = computing;
    }
    
    public Player getBlack() {
        return black;
    }
    
    public Player getWhite() {
        return white;
    }
    
    public int getAnimationState() {
        return aState;
    }
    
    private void updateStats(boolean tie) {
        if(!tie) {
            getCurrentPlayer().addWin();
            getOtherPlayer().addLoss();
            player1WinsLabel.setText("" + black.getWins());
            player1LossesLabel.setText("" + black.getLosses());
            player2WinsLabel.setText("" + white.getWins());
            player2LossesLabel.setText("" + white.getLosses());
        } else {
            getCurrentPlayer().addTie();
            getOtherPlayer().addTie();
            player1TiesLabel.setText("" + black.getTies());
            player2TiesLabel.setText("" + white.getTies());
        }
    }
    
    /**
     * Prints a message on the chatlog.
     * TODO: An actual chatlog, not a sout.
     * @param message The message to print
     */
    public void sendMessage(String message) {
        System.out.println(message);
    }
    
    private void animatePieces() {
        while(true) {
            if(!finished) {
                aState = (aState + 1)%3;
                setPiecesState(aState);
                try {
                    Thread.sleep(500);
                } catch(InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
        }
    }
    
    private void setPiecesState(int state) {
        for(Piece pieces[] : board) {
            for(Piece piece : pieces) {
                if(piece.getOwner() != null) {
                    piece.setIcon(piece.getOwner().getIconState(state));
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Game().setVisible(true);
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JPanel boardPanel;
    private javax.swing.JButton btAbsten;
    private javax.swing.JButton btDraw;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btReady;
    private javax.swing.JButton btRefund;
    private javax.swing.JButton btStart;
    private javax.swing.JLabel censorLabel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel info1Label;
    private javax.swing.JLabel info2Label;
    private javax.swing.JLabel player1LossesLabel;
    private javax.swing.JLabel player1NameLabel;
    private javax.swing.JLabel player1PieceLabel;
    private javax.swing.JLabel player1TiesLabel;
    private javax.swing.JLabel player1TurnLabel;
    private javax.swing.JLabel player1WinsLabel;
    private javax.swing.JLabel player2LossesLabel;
    private javax.swing.JLabel player2NameLabel;
    private javax.swing.JLabel player2PieceLabel;
    private javax.swing.JLabel player2TiesLabel;
    private javax.swing.JLabel player2TurnLabel;
    private javax.swing.JLabel player2WinsLabel;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel turnLabel;
    // End of variables declaration//GEN-END:variables
}
